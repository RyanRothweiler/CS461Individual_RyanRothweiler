# Basic cingle state values
GridMax = 20.

# If unspecified, state is initialized to 0. 
Platform.

# Objetcs 
Player, Chicken = {X, Y, Atk, Def, Health = 10}.

# These copys just duplicate what is in the brackets
# Copying with iterating through lists
copy Thing = [Player, Chicken] 
{
	|Thing|'Atk = 5.
	|Thing|'Def = 5.
}.

# Copying with iterating through numbers
copy X = 1..20
{
	Mouse|X| = {X, Y}.
}

# Automatic state validation?
# When to turn it off or on? Some rules are meant to be broken. 
# Can do state validation in state decleration or in state transformation. Maybe both?
Bike = 100 can (VALUE < 10 and VALUE > Mouse).
# Maybe these should be called rules? So the designer can use them when they want to. This is just moving where the validation is done. Possibly allow any of the three.
CanMove = Rule using Thing
	true if (Thing'X > 0 and Thing'Y < 10).

MoveThingUp = Event
	using Thing
	does Thing'X = Thing'X + 1.

MoveUp = PlayerAction
	does MoveUp(Player) if CanMove(Player).


# Arrays. All arrays hold only pointers to other objects, or just values.
# Declare 10 by 10, and each cell holds an object with X, Y, 
Grid = [10x10].

# Things we want to do with arrays
##
1. Add object at index.
2. Get object by index.
3. Iterate through the array, get, set, and change arbitrarily. 
4. Insert objects. 
5. Remove objects.

Arrays have their own specific commands. How else to do this?
Maybe do some set theory stuff here? Would a designer ever want to add two arrays together? I don't want a designer to need to understand set theory to use this. I like the idea of making this probably too verbose.

Foreach loop is possible. But there are probably only a few very common list commands. 
Need both. Have commands available, but also a foreach feature if the designer REALLY wants it.
##

# Filling the array. (Is it possible to use these ranges in more places? Maybe in array state transformations also?)
Grid[1..10, 1..10] = {X, Y, HP}.
Grid[1..5, 1..5] = {Weather = 0, Alive = 1}.
Grid[1,2] = 0.


# Remove the thing at index 0.
Grid RemoveAt 0.
Grid RemoveAll X.
Grid RemoveFirst X.
Grid RemoveLast X.
Grid RemoveAny X.

Grid foreach
	does

# Any of these can contain if statements
Grid RemoveAt 0 if INDEX < 0.
Grid RemoveAll 

#
Grid Insert At 0.

# Arrays hold only pointers. This array all points to one Cat.
Cat = {Legs = 4, Tail = 1}.
AllPointers = [5].
AllPointers all Cat

Animals = [Mouse1, Mouse2, Mouse3, Player, Chicken].
AnimalGrid = [	[Mouse1, 	Mouse2, 	Mouse3, 	Mouse4, 	Mouse5],
				[Mouse6, 	Mouse7, 	Paltform, 	Mouse9, 	Mouse10],
				[Mouse11, 	Mouse12, 	Mouse13, 	Mouse14, 	Mouse15],
				[Mouse16, 	Mouse17, 	Mouse18, 	Mouse19, 	Mouse20] 	].

# Can index into arrays
# Assigns a value to the thing which is already in the array
AnimalGrid[1, 1]'Mouse'X = 1.

# Puts something new into the array.
AnimalGrid[1, 2] = Chicken.

# Can add into the array at any position.
Animals[100] = Player.

# Dot notation
PlayerPos'X = 10.
PlayerPos'Y = 10.

# Event. These are things the game can do to change state.
MoveUpIfAlive = Event
	using Thing
	does Thing'X = Thing'X - 1 if Thing'Health > 0 and Thing'X - 1 > 0.


BoardMoveDown = Event
copy x = 5..1
{
	copy y = 5..1
	{
		does AnimalGrid[|x|, |y|] = AnimalGrid[|x|, |y| - 1] if not AnimalGrid[|x|, |y|] is Rock
	}
}
.

# ForEaches?
# How to determine the order?
BoardMoveUp = Event
	ForEach

# Player Actions. These are the things that the player can do to change state.
MovePlayerUp = PlayerAction 
	does MoveUpIfAlive(Player).



# Validation with state
Health = 0.
Health mustbe > 0 and < 10.

AddHealth = PlayerAction 
	does Health = Health + 1.

# As opposed to
Health = 0.

AddHealth = PlayerAction 
	does Health = Health + 1 
	if Health + 1 < 10.

# Possibly state values should have validation?
# Might be a nice way to create more human rules. But also not necessary, and can get very messy very quickly.
Health 
	does Health = 100
	if Health < 10.





## Arrays
- All array indecies are automatically populated with x and/or y values which hold the index of the object.
- All array indecies are automatically populated with an I values, which holds the index as if the array were one dimensional.
- Array length can be queried with ID'Length, or ID'Width 
- Only 1d and 2d arrays are supported. 
##
# Create empty array
ArrayID = [10].
TwoDArrayID = [10x10].
Mantaray = [10].

# Fill with something existing. 
Cat = 10.
Mantaray[0] = Cat.
Mantaray[1] = Cat.

# Fill with something new
Mantaray[10] = {Atk = 10, Def = 1}.
Mantaray[0]'Atk = 100.

# Fill the entire array
Mantaray[0..10] = {Atk, Def}.

# Fill only one quadrant
TwoDArrayID[0..5, 5..10] = {Spd, HP}.

## Arrays
- All array indecies are automatically populated with x and/or y values which hold the index of the object.
- All array indecies are automatically populated with an I values, which holds the index as if the array were one dimensional.
- Array length can be queried with ID'XMax, or ID'YMax, or ID'Max (which holds the length of the array as if it were one dimensional). 
- Only 1d and 2d arrays are supported. 
##

# Iteration done through recursion
MoveGridDown = GameAction
	using Cell
	does TwoDArray[Cell'X, Cell'Y + 1] = Cell if TwoDArray[Cell'X, Cell'Y + 1].IsEmpty = 1
	does MoveGridDown(Cell'I - 1) if Cell'I > 0.

PlayerAbilityMoveWorld = PlayerAction
	does MoveGridDown(TwoDArray[TwoDarray'Max]), PlayerMana = PlayerMana - 10 if PlayerMana > 10.


## Something SQL like. Combination of terms. 

# Whats needed
Start, End, 

##






7/11/17

Rules - events which are evaluates anytime an player action is taken

There are pain points in iteration. I think just bypassing iteration completely (and relying on recurion when iteration is necessary) is the best solution.
- Can create and destroy array indecies anytime. Think of them more like linked lists. 
- Shouldn't need to 'declare' an array. Can make any number of 'things' at any time.

Create 5 Crystals = {X, Y}.
Crystals[1]'X = 20.
Crystals[2]'X = 30.
Destroy Crystals[0].

Create and destroy other things? Should all entities just be arrays?

# This creates 5 crystals.
Create 5 Crystals = {X, Y}.

# They can be accesed like arrays
Crystals[0].

# Can add and remove crystals at any time.
Create 2 Crystals.

Problems Here
- What about declaring members? 
- Just assume the same members? 
- They don't necessarily NEED to have the same members. It is probably a good practice though. 
- Maybe this means we need a decleration of types. All objects of 
- All objects of one 'type' don't necessarily need to live in one array. Any reason for them not to?
- How to get them to edit them after they've been created?





7/12/16

Possible Solutions
	- A more traditional type system.

		Coin is type {X, Y}.
		CoinOne is Coin.
		CoinTwo is Coin.

		or 

		CoinOne is {X, Y}.
		CoinTwo is {X, Y}.

	Now need to worry about type and name identifiers.



# Phases

Phase PlaceWorker
{
	# anything in here is only 'in scope' if the phase PlaceWorker is enabled
}

DoPlaceWorker = Event
	does EnablePhase PlaceWorker


Dog = {Happy, Sad}.
Dog = 2{Happy, Sad}.
Dog = Dog + 2{Happy, Sad} + {Happy, Sad}.

A kind type definition is necessary. If we're going to be adding to the array, then we want to add someething of the same type.
Maybe all things of the same type are in an array automatically? And you can just access them as you like, don't need to specify that they're in an array.


Define Crystal as {X, Y}.
Create 2 Crystal.
Crystal[0]'X = 1.
Crystal[1]'X = 2.
Create 1 Crystal.
Crystal[3]'X = 3.
Destory Crystal[0].

Arrays stay as small as possible, deleting an index shrinks the array.
Now we're left with only two crystals. Crystal[0]'X == 2 is true, and Crystal[1]'X == 3 is true.

Can get the length of the array.
Crystals'Count.

Can simply create things without creating a type for them. Anonymous types you might say.
Dog = {Happy, Sad}.
Dog is an entity which has members of Happy and Sad, but no type.

This is a big changes, is it NECESSARY? It seems we can do most of the same stuff with what we currently have by simply adding a .Length and .Remove member to arrays.




!!! This is the best thing to do next imo
InitCoins = [2]{X = 0, Y = 2, Alive = 1}.
InitCoins'Add 1.
InitCoins[InitCoins'Length]'X = 5.
InitCoins'RemoveAt 0.

This relys on more traditional programming techniques but means there is less to learn, this makes the language more slim and powerfull... I believe.
Should things be 0 or 1 indexed? From this, it looks like 1. No pointers in the language.




????
Can simply iterate through all Crystals.
These iterations are ALWAYS combinatorial.

Crystals'X = Crystals'Y.
This is the same as 
Crystals[0]'X = Crystals[0]'Y, 
Crystals[0]'X = Crystals[1]'Y,
Crystals[0]'X = Crystals[2]'Y,

Crystals[1]'X = Crystals[0]'Y, 
Crystals[1]'X = Crystals[1]'Y,
Crystals[1]'X = Crystals[2]'Y

Do arrays combine with themselves?
This is a problem... Is there some other solution. Some sql system?
Maybe don't solve this? Just let designers use recursion.
???

Define Dogs












7/13/17 

Now how do we iterate over the coins? How to check if any character is on any coin when the array of coins is always changing. ?





7/14/17 

How to iterate over the coins?
Want to say, if any character is standing on any coin then he gets gold and the coin is destroyed. 

# true if any character is standing on any coin.
if Coins'X = Characters'X and Coins'Y = Characters'Y.

# true if any coin is in the same place as another coin, but doesn't count the same coin to be in the same place as itself.
if Coins'X = Coins'X and Coins'Y = Coins'Y and not Coins'Index = Coins'Index.

- (Works somewhat like sql)
- Evaluated left to right.

- Iterate through all the coins until a successful combination is found for which true is evaluated. 
- Hold those operands and use them for the remainder of the operation instead of iterating through the array to find new operands

if A:Coins B:Coins where A'X = B'X and A'Y = B'Y and not A'Index = B'Index.

Test = Event
	foreach A in Coins, B in Coins
	does A'Alive = 10
	if A'X = B'X and A'Y = B'Y and not A'Index = B'Index.




7/15/17


# Can move a coin[0] around. When it is on the same space as another coin, the other coin is removed and it's values is added to the coin being controled.
Coins = 5{X = 0, Y = 0, Value = Random 1 to 10}

Test = Event
	foreach A in Coins, B in Coins
	does A'Value = A'Value + B'Value, Coins'RemoveAt(B'Index)
	if A'X = B'X and A'Y = B'Y and not A'Index = B'Index.
